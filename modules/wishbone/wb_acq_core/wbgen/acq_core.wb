peripheral {
  name = "BPM FSM Acquisition registers";
  description = "Wishbone slave for BPM Core Acquisition";
  hdl_entity = "acq_core_regs";

  prefix = "acq_core";

  reg {
    name = "Control register";
    prefix = "ctl";

    --field {
    --  name = "State machine commands (ignore on read)";
    --  description = "1: ACQ_START (start acquisition, only when FSM is idle)\n2: ACQ_STOP (stop acquisition, anytime)";
    --  prefix = "fsm_cmd";
    --  type = PASS_THROUGH;
    --  size = 2;
    --  clock = "fs_clk_i";
    --  access_bus = READ_WRITE;
    --  access_dev = READ_ONLY;
    --};

    field {
      name = "State machine acquisition_start command (ignore on read)";
      description = "1: ACQ_START (start acquisition, only when FSM is idle)";
      prefix = "fsm_start_acq";
      type = MONOSTABLE;
      size = 1;
      clock = "fs_clk_i";
      access_bus = WRITE_ONLY;
      access_dev = READ_ONLY;
    };

    field {
      name = "State machine stop command (ignore on read)";
      description = "1: ACQ_STOP (stop acquisition, anytime)";
      prefix = "fsm_stop_acq";
      type = MONOSTABLE;
      size = 1;
      clock = "fs_clk_i";
      access_bus = WRITE_ONLY;
      access_dev = READ_ONLY;
    };

    field {
      name = "Reserved1";
      description = "Ignore on read, write with 0's";
      prefix = "reserved1";
      type = SLV;
      size = 14;
      access_bus = READ_WRITE;
      access_dev = READ_ONLY;
    };

    field {
      name = "Acquire data immediately and don't wait for any trigger (ignore on read)";
      description = "1: Acquire immediately\n0: Wait for trigger";
      prefix = "fsm_acq_now";
      type = BIT;
      align = 16;
      size = 1;
      clock = "fs_clk_i";
      access_bus = READ_WRITE;
      access_dev = READ_ONLY;
    };

    field {
      name = "Reserved2";
      description = "Ignore on read, write with 0's";
      prefix = "reserved2";
      type = SLV;
      size = 15;
      access_bus = READ_WRITE;
      access_dev = READ_ONLY;
    };
  };

  reg {
    name = "Status register";
    prefix = "sta";

    field {
      name = "State machine status";
      description = "States:\n0: illegal\n1: IDLE\n2: PRE_TRIG\n3: WAIT_TRIG\n4: POST_TRIG\n5: DECR_SHOT\n6: illegal\n7: illegal";
      prefix = "fsm_state";
      type = SLV;
      size = 3;
      clock = "fs_clk_i";
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "FSM acquisition status";
      description = "Values:\n0: in progress\n1: completed";
      prefix = "fsm_acq_done";
      type = BIT;
      size = 1;
      clock = "fs_clk_i";
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "FIFO write enable";
      description = "FIFO write enable, used for debug only";
      prefix = "fifo_we";
      type = SLV;
      size = 1;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "FIFO read enable";
      description = "FIFO read enable, used for debug only";
      prefix = "fifo_re";
      type = SLV;
      size = 1;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "FIFO flow control read enable";
      description = "FIFO flow control read enable, used for debug only";
      prefix = "fifo_fc_rd_en";
      type = SLV;
      size = 1;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "FIFO empty";
      description = "FIFO empty, used for debug only";
      prefix = "fifo_rd_empty";
      type = SLV;
      size = 1;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "External flow control transfer status";
      description = "Values:\n0: in progress\n1: completed";
      prefix = "fc_trans_done";
      type = BIT;
      size = 1;
      align = 8;
      clock = "fs_clk_i";
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "External flow control FIFO full status";
      description = "Values:\n0: not full\n1: full (data may be lost)";
      prefix = "fc_full";
      type = BIT;
      size = 1;
      clock = "fs_clk_i";
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "FIFO write full";
      description = "FIFO write full, used for debug only";
      prefix = "fifo_wr_full";
      type = SLV;
      size = 1;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "FWFT FIFO valid output";
      description = "FWFT FIFO valid output, used for debug only";
      prefix = "fifo_fc_valid_fwft";
      type = SLV;
      size = 1;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "Flow control data required";
      description = "Flow control data required, used for debug only";
      prefix = "source_pl_dreq";
      type = SLV;
      size = 1;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "Flow control stall";
      description = "Flow control stall, used for debug only";
      prefix = "source_pl_stall";
      type = SLV;
      size = 1;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "Reserved";
      description = "Ignore on read, write with 0's";
      prefix = "reserved2";
      type = SLV;
      size = 2;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "DDR3 transfer status";
      description = "Values:\n0: in progress\n1: completed";
      prefix = "ddr3_trans_done";
      type = BIT;
      size = 1;
      align = 8;
      clock = "fs_clk_i";
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "FIFO write count";
      description = "FIFO write count, used for debugging only";
      prefix = "fifo_wr_count";
      type = SLV;
      size = 15;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };

  reg {
    name = "Trigger configuration";
    prefix = "trig_cfg";

    field {
      name = "Hardware trigger selection";
      description = "0: internal (data threshold)\n1: external (front panel trigger input)";
      prefix = "hw_trig_sel";
      type = BIT;
      clock = "fs_clk_i";
      access_bus = READ_WRITE;
      access_dev = READ_ONLY;
    };

    field {
      name = "Hardware trigger polarity";
      description = "0: positive edge/slope\n1: negative edge/slope";
      prefix = "hw_trig_pol";
      type = BIT;
      clock = "fs_clk_i";
      access_bus = READ_WRITE;
      access_dev = READ_ONLY;
    };

    field {
      name = "Hardware trigger enable";
      description = "0: disable\n1: enable";
      prefix = "hw_trig_en";
      type = BIT;
      clock = "fs_clk_i";
      access_bus = READ_WRITE;
      access_dev = READ_ONLY;
    };

    field {
      name = "Software trigger enable";
      description = "0: disable\n1: enable";
      prefix = "sw_trig_en";
      type = BIT;
      clock = "fs_clk_i";
      access_bus = READ_WRITE;
      access_dev = READ_ONLY;
    };

    field {
      name = "Atom selection for internal trigger (atom within the channel selected by DTRIG_WHICH)";
      description = "00: atom 1\n01: atom 2\n10: atom 3\nn: atom n+1";
      prefix = "int_trig_sel";
      type = SLV;
      size = 5;
      clock = "fs_clk_i";
      access_bus = READ_WRITE;
      access_dev = READ_ONLY;
    };

    field {
      name = "Reserved";
      description = "Ignore on read, write with 0's";
      prefix = "reserved";
      type = SLV;
      size = 23;
      access_bus = READ_WRITE;
      access_dev = READ_ONLY;
    };
  };

  reg {
    name = "Trigger data config threshold";
    prefix = "trig_data_cfg";

    field {
      name = "Internal trigger threshold glitch filter";
      description = "Configures the internal trigger threshold glitch filter length.";
      prefix = "thres_filt";
      type = SLV;
      size = 8;
      access_bus = READ_WRITE;
      access_dev = READ_ONLY;
      clock = "fs_clk_i";
    };

    field {
      name = "Reserved";
      description = "Ignore on read, write with 0's";
      prefix = "reserved";
      type = SLV;
      size = 24;
      access_bus = READ_WRITE;
      access_dev = READ_ONLY;
    };
  };

  reg {
    name = "Trigger data threshold";
    prefix = "trig_data_thres";

    field {
      name = "Threshold for internal trigger";
      description = "Treated as binary two's complement and compared to the \nspecified channel data";
      type = SLV;
      size = 32;
      access_bus = READ_WRITE;
      access_dev = READ_ONLY;
      clock = "fs_clk_i";
    };
  };

  reg {
    name = "Trigger delay";
    prefix = "trig_dly";

    field {
      name = "Trigger delay value";
      description = "Delay to apply on the trigger in sampling clock period.\nThe default clock frequency is 100MHz (period = 10ns).";
      type = SLV;
      size = 32;
      access_bus = READ_WRITE;
      access_dev = READ_ONLY;
      clock = "fs_clk_i";
    };
  };

  reg {
    name = "Software trigger";
    description = "Writing (anything) to this register generates a software trigger.";

    prefix = "sw_trig";
    field {
      name = "Software trigger (ignore on read)";
      type = PASS_THROUGH;
      size = 32;
      clock = "fs_clk_i";
    };
   };

  reg {
    name = "Number of shots";
    prefix = "shots";

    field {
      name = "Number of shots";
      description = "Number of shots required in multi-shot mode, set to one for single-shot mode.";
      prefix = "nb";
      type = SLV;
      size = 16;
      clock = "fs_clk_i";
      access_bus = READ_WRITE;
      access_dev = READ_ONLY;
    };

    field {
      name = "MultiShot RAM size implemented";
      description = "Set this bit to 1 if the multishot RAM size reg is implemented";
      prefix = "multishot_ram_size_impl";
      type = BIT;
      size = 1;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "MultiShot RAM size";
      description = "Multishot RAM size";
      prefix = "multishot_ram_size";
      type = SLV;
      size = 15;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };

  reg {
    name = "Trigger address register";
    prefix = "trig_pos";

    field {
      name = "Trigger address";
      description = "Trigger address in DDR memory.\nOnly used in single-shot mode.";
      type = SLV;
      size = 32;
      clock = "fs_clk_i";
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };

  reg {
    name = "Pre-trigger samples";
    prefix = "pre_samples";

    field {
      name = "Pre-trigger samples";
      description = "Number of requested pre-trigger samples";
      type = SLV;
      size = 32;
      clock = "fs_clk_i";
      access_bus = READ_WRITE;
      access_dev = READ_ONLY;
    };
  };

  reg {
    name = "Post-trigger samples";
    prefix = "post_samples";

    field {
      name = "Post-trigger samples";
      description = "Number of requested post-trigger samples";
      type = SLV;
      size = 32;
      clock = "fs_clk_i";
      access_bus = READ_WRITE;
      access_dev = READ_ONLY;
    };
  };

  reg {
    name = "Samples counter";
    prefix = "samples_cnt";

    field {
      name = "Samples counter";
      description = "Counts the number of samples.\n It is reset on START and then counts the number of pre-trigger + post-trigger samples";
      type = SLV;
      size = 32;
      clock = "fs_clk_i";
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };

  reg {
    name = "DDR3 Start Address";
    prefix = "ddr3_start_addr";

    field {
      name = "DDR3 Start Address";
      description = "Start address in DDR3 memory for the next acquisition.\nMust be word aligned (2 LSB zeroed)";
      type = SLV;
      size = 32;
      -- This clock is 2x the sys_clock and a simple 2-stage synchronizer won't help here.
      -- So, we just ignore that this register is in a different domain and hope for the best,
      -- as this is just a configuration register that is ONLY read upon a fully synchronous
      -- strobe "acq_start".
      clock = "ext_clk_i";
      access_bus = READ_WRITE;
      access_dev = READ_ONLY;
    };
  };

  reg {
    name = "DDR3 End Address";
    prefix = "ddr3_end_addr";

    field {
      name = "DDR3 End Address";
      description = "End address in DDR3 memory for the next acquisition.\nMust be word aligned (2 LSB zeroed)";
      type = SLV;
      size = 32;
      -- This clock is 2x the sys_clock and a simple 2-stage synchronizer won't help here.
      -- So, we just ignore that this register is in a different domain and hope for the best,
      -- as this is just a configuration register that is ONLY read upon a fully synchronous
      -- strobe "acq_start".
      clock = "ext_clk_i";
      access_bus = READ_WRITE;
      access_dev = READ_ONLY;
    };
  };

  reg {
    name = "Acquisition channel control";
    prefix = "acq_chan_ctl";

    field {
      name = "Acquisition channel selection";
      description = "Selection of path to acquire on next acquisition.";
      prefix = "which";
      type = SLV;
      size = 5;
      clock = "fs_clk_i";
      access_bus = READ_WRITE;
      access_dev = READ_ONLY;
    };

    field {
      name = "Reserved";
      description = "Ignore on read, write with 0's";
      prefix = "reserved";
      type = SLV;
      size = 3;
      access_bus = READ_WRITE;
      access_dev = READ_ONLY;
    };

    field {
      name = "Data-driven channel selection";
      description = "Selection of path to detect data-driven trigger on next acquisition.";
      prefix = "dtrig_which";
      type = SLV;
      align = 8;
      size = 5;
      clock = "fs_clk_i";
      access_bus = READ_WRITE;
      access_dev = READ_ONLY;
    };

    field {
      name = "Reserved1";
      description = "Ignore on read, write with 0's";
      prefix = "reserved1";
      type = SLV;
      size = 3;
      access_bus = READ_WRITE;
      access_dev = READ_ONLY;
    };

    field {
      name = "Number of acquisition channels";
      description = "Number of acquisition Channels";
      prefix = "num_chan";
      type = SLV;
      align = 8;
      size = 5;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "Reserved2";
      description = "Ignore on read, write with 0's";
      prefix = "reserved2";
      type = SLV;
      size = 11;
      access_bus = READ_WRITE;
      access_dev = READ_ONLY;
    };
  };

  ---------------------------------------------------------------------------
  -- Acquisition Channels Descriptions
  ---------------------------------------------------------------------------

  -- Channel 0

  reg {
    name = "Channel 0 Description";
    prefix = "ch0_desc";

    field {
      name = "Channel Internal Width";
      prefix = "int_width";
      description = "Internal Channel Width (must multiply by the \
                    number of coalesced words to get the total width)";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "Number of coalescing words";
      prefix = "num_coalesce";
      description = "Number of coalescing words to form the complete user word";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };

  reg {
    name = "Channel 0 Atom Description";
    prefix = "ch0_atom_desc";

    field {
      name = "Number of atoms inside the complete data word (int_width*num_coalesce)";
      prefix = "num_atoms";
      description = "Number of atoms inside the complete data word";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "Atom width";
      prefix = "atom_width";
      description = "Atom width in bits";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };

  -- Channel 1

  reg {
    name = "Channel 1 Description";
    prefix = "ch1_desc";

    field {
      name = "Channel Internal Width";
      prefix = "int_width";
      description = "Internal Channel Width (must multiply by the \
                    number of coalesced words to get the total width)";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "Number of coalescing words";
      prefix = "num_coalesce";
      description = "Number of coalescing words to form the complete user word";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };

  reg {
    name = "Channel 1 Atom Description";
    prefix = "ch1_atom_desc";

    field {
      name = "Number of atoms inside the complete data word (int_width*num_coalesce)";
      prefix = "num_atoms";
      description = "Number of atoms inside the complete data word";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "Atom width";
      prefix = "atom_width";
      description = "Atom width in bits";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };

  -- Channel 2

  reg {
    name = "Channel 2 Description";
    prefix = "ch2_desc";

    field {
      name = "Channel Internal Width";
      prefix = "int_width";
      description = "Internal Channel Width (must multiply by the \
                    number of coalesced words to get the total width)";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "Number of coalescing words";
      prefix = "num_coalesce";
      description = "Number of coalescing words to form the complete user word";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };

  reg {
    name = "Channel 2 Atom Description";
    prefix = "ch2_atom_desc";

    field {
      name = "Number of atoms inside the complete data word (int_width*num_coalesce)";
      prefix = "num_atoms";
      description = "Number of atoms inside the complete data word";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "Atom width";
      prefix = "atom_width";
      description = "Atom width in bits";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };

  -- Channel 3

  reg {
    name = "Channel 3 Description";
    prefix = "ch3_desc";

    field {
      name = "Channel Internal Width";
      prefix = "int_width";
      description = "Internal Channel Width (must multiply by the \
                    number of coalesced words to get the total width)";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "Number of coalescing words";
      prefix = "num_coalesce";
      description = "Number of coalescing words to form the complete user word";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };

  reg {
    name = "Channel 3 Atom Description";
    prefix = "ch3_atom_desc";

    field {
      name = "Number of atoms inside the complete data word (int_width*num_coalesce)";
      prefix = "num_atoms";
      description = "Number of atoms inside the complete data word";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "Atom width";
      prefix = "atom_width";
      description = "Atom width in bits";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };

  -- Channel 4

  reg {
    name = "Channel 4 Description";
    prefix = "ch4_desc";

    field {
      name = "Channel Internal Width";
      prefix = "int_width";
      description = "Internal Channel Width (must multiply by the \
                    number of coalesced words to get the total width)";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "Number of coalescing words";
      prefix = "num_coalesce";
      description = "Number of coalescing words to form the complete user word";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };

  reg {
    name = "Channel 4 Atom Description";
    prefix = "ch4_atom_desc";

    field {
      name = "Number of atoms inside the complete data word (int_width*num_coalesce)";
      prefix = "num_atoms";
      description = "Number of atoms inside the complete data word";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "Atom width";
      prefix = "atom_width";
      description = "Atom width in bits";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };

  -- Channel 5

  reg {
    name = "Channel 5 Description";
    prefix = "ch5_desc";

    field {
      name = "Channel Internal Width";
      prefix = "int_width";
      description = "Internal Channel Width (must multiply by the \
                    number of coalesced words to get the total width)";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "Number of coalescing words";
      prefix = "num_coalesce";
      description = "Number of coalescing words to form the complete user word";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };

  reg {
    name = "Channel 5 Atom Description";
    prefix = "ch5_atom_desc";

    field {
      name = "Number of atoms inside the complete data word (int_width*num_coalesce)";
      prefix = "num_atoms";
      description = "Number of atoms inside the complete data word";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "Atom width";
      prefix = "atom_width";
      description = "Atom width in bits";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };

  -- Channel 6

  reg {
    name = "Channel 6 Description";
    prefix = "ch6_desc";

    field {
      name = "Channel Internal Width";
      prefix = "int_width";
      description = "Internal Channel Width (must multiply by the \
                    number of coalesced words to get the total width)";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "Number of coalescing words";
      prefix = "num_coalesce";
      description = "Number of coalescing words to form the complete user word";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };

  reg {
    name = "Channel 6 Atom Description";
    prefix = "ch6_atom_desc";

    field {
      name = "Number of atoms inside the complete data word (int_width*num_coalesce)";
      prefix = "num_atoms";
      description = "Number of atoms inside the complete data word";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "Atom width";
      prefix = "atom_width";
      description = "Atom width in bits";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };

  -- Channel 7

  reg {
    name = "Channel 7 Description";
    prefix = "ch7_desc";

    field {
      name = "Channel Internal Width";
      prefix = "int_width";
      description = "Internal Channel Width (must multiply by the \
                    number of coalesced words to get the total width)";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "Number of coalescing words";
      prefix = "num_coalesce";
      description = "Number of coalescing words to form the complete user word";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };

  reg {
    name = "Channel 7 Atom Description";
    prefix = "ch7_atom_desc";

    field {
      name = "Number of atoms inside the complete data word (int_width*num_coalesce)";
      prefix = "num_atoms";
      description = "Number of atoms inside the complete data word";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "Atom width";
      prefix = "atom_width";
      description = "Atom width in bits";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };

  -- Channel 8

  reg {
    name = "Channel 8 Description";
    prefix = "ch8_desc";

    field {
      name = "Channel Internal Width";
      prefix = "int_width";
      description = "Internal Channel Width (must multiply by the \
                    number of coalesced words to get the total width)";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "Number of coalescing words";
      prefix = "num_coalesce";
      description = "Number of coalescing words to form the complete user word";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };

  reg {
    name = "Channel 8 Atom Description";
    prefix = "ch8_atom_desc";

    field {
      name = "Number of atoms inside the complete data word (int_width*num_coalesce)";
      prefix = "num_atoms";
      description = "Number of atoms inside the complete data word";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "Atom width";
      prefix = "atom_width";
      description = "Atom width in bits";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };

  -- Channel 9

  reg {
    name = "Channel 9 Description";
    prefix = "ch9_desc";

    field {
      name = "Channel Internal Width";
      prefix = "int_width";
      description = "Internal Channel Width (must multiply by the \
                    number of coalesced words to get the total width)";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "Number of coalescing words";
      prefix = "num_coalesce";
      description = "Number of coalescing words to form the complete user word";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };

  reg {
    name = "Channel 9 Atom Description";
    prefix = "ch9_atom_desc";

    field {
      name = "Number of atoms inside the complete data word (int_width*num_coalesce)";
      prefix = "num_atoms";
      description = "Number of atoms inside the complete data word";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "Atom width";
      prefix = "atom_width";
      description = "Atom width in bits";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };

  -- Channel 10

  reg {
    name = "Channel 10 Description";
    prefix = "ch10_desc";

    field {
      name = "Channel Internal Width";
      prefix = "int_width";
      description = "Internal Channel Width (must multiply by the \
                    number of coalesced words to get the total width)";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "Number of coalescing words";
      prefix = "num_coalesce";
      description = "Number of coalescing words to form the complete user word";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };

  reg {
    name = "Channel 10 Atom Description";
    prefix = "ch10_atom_desc";

    field {
      name = "Number of atoms inside the complete data word (int_width*num_coalesce)";
      prefix = "num_atoms";
      description = "Number of atoms inside the complete data word";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "Atom width";
      prefix = "atom_width";
      description = "Atom width in bits";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };

  -- Channel 11

  reg {
    name = "Channel 11 Description";
    prefix = "ch11_desc";

    field {
      name = "Channel Internal Width";
      prefix = "int_width";
      description = "Internal Channel Width (must multiply by the \
                    number of coalesced words to get the total width)";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "Number of coalescing words";
      prefix = "num_coalesce";
      description = "Number of coalescing words to form the complete user word";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };

  reg {
    name = "Channel 11 Atom Description";
    prefix = "ch11_atom_desc";

    field {
      name = "Number of atoms inside the complete data word (int_width*num_coalesce)";
      prefix = "num_atoms";
      description = "Number of atoms inside the complete data word";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "Atom width";
      prefix = "atom_width";
      description = "Atom width in bits";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };

  -- Channel 12

  reg {
    name = "Channel 12 Description";
    prefix = "ch12_desc";

    field {
      name = "Channel Internal Width";
      prefix = "int_width";
      description = "Internal Channel Width (must multiply by the \
                    number of coalesced words to get the total width)";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "Number of coalescing words";
      prefix = "num_coalesce";
      description = "Number of coalescing words to form the complete user word";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };

  reg {
    name = "Channel 12 Atom Description";
    prefix = "ch12_atom_desc";

    field {
      name = "Number of atoms inside the complete data word (int_width*num_coalesce)";
      prefix = "num_atoms";
      description = "Number of atoms inside the complete data word";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "Atom width";
      prefix = "atom_width";
      description = "Atom width in bits";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };

  -- Channel 13

  reg {
    name = "Channel 13 Description";
    prefix = "ch13_desc";

    field {
      name = "Channel Internal Width";
      prefix = "int_width";
      description = "Internal Channel Width (must multiply by the \
                    number of coalesced words to get the total width)";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "Number of coalescing words";
      prefix = "num_coalesce";
      description = "Number of coalescing words to form the complete user word";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };

  reg {
    name = "Channel 13 Atom Description";
    prefix = "ch13_atom_desc";

    field {
      name = "Number of atoms inside the complete data word (int_width*num_coalesce)";
      prefix = "num_atoms";
      description = "Number of atoms inside the complete data word";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "Atom width";
      prefix = "atom_width";
      description = "Atom width in bits";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };

  -- Channel 14

  reg {
    name = "Channel 14 Description";
    prefix = "ch14_desc";

    field {
      name = "Channel Internal Width";
      prefix = "int_width";
      description = "Internal Channel Width (must multiply by the \
                    number of coalesced words to get the total width)";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "Number of coalescing words";
      prefix = "num_coalesce";
      description = "Number of coalescing words to form the complete user word";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };

  reg {
    name = "Channel 14 Atom Description";
    prefix = "ch14_atom_desc";

    field {
      name = "Number of atoms inside the complete data word (int_width*num_coalesce)";
      prefix = "num_atoms";
      description = "Number of atoms inside the complete data word";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "Atom width";
      prefix = "atom_width";
      description = "Atom width in bits";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };

  -- Channel 15

  reg {
    name = "Channel 15 Description";
    prefix = "ch15_desc";

    field {
      name = "Channel Internal Width";
      prefix = "int_width";
      description = "Internal Channel Width (must multiply by the \
                    number of coalesced words to get the total width)";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "Number of coalescing words";
      prefix = "num_coalesce";
      description = "Number of coalescing words to form the complete user word";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };

  reg {
    name = "Channel 15 Atom Description";
    prefix = "ch15_atom_desc";

    field {
      name = "Number of atoms inside the complete data word (int_width*num_coalesce)";
      prefix = "num_atoms";
      description = "Number of atoms inside the complete data word";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "Atom width";
      prefix = "atom_width";
      description = "Atom width in bits";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };

  -- Channel 16

  reg {
    name = "Channel 16 Description";
    prefix = "ch16_desc";

    field {
      name = "Channel Internal Width";
      prefix = "int_width";
      description = "Internal Channel Width (must multiply by the \
                    number of coalesced words to get the total width)";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "Number of coalescing words";
      prefix = "num_coalesce";
      description = "Number of coalescing words to form the complete user word";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };

  reg {
    name = "Channel 16 Atom Description";
    prefix = "ch16_atom_desc";

    field {
      name = "Number of atoms inside the complete data word (int_width*num_coalesce)";
      prefix = "num_atoms";
      description = "Number of atoms inside the complete data word";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "Atom width";
      prefix = "atom_width";
      description = "Atom width in bits";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };

  -- Channel 17

  reg {
    name = "Channel 17 Description";
    prefix = "ch17_desc";

    field {
      name = "Channel Internal Width";
      prefix = "int_width";
      description = "Internal Channel Width (must multiply by the \
                    number of coalesced words to get the total width)";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "Number of coalescing words";
      prefix = "num_coalesce";
      description = "Number of coalescing words to form the complete user word";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };

  reg {
    name = "Channel 17 Atom Description";
    prefix = "ch17_atom_desc";

    field {
      name = "Number of atoms inside the complete data word (int_width*num_coalesce)";
      prefix = "num_atoms";
      description = "Number of atoms inside the complete data word";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "Atom width";
      prefix = "atom_width";
      description = "Atom width in bits";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };

  -- Channel 18

  reg {
    name = "Channel 18 Description";
    prefix = "ch18_desc";

    field {
      name = "Channel Internal Width";
      prefix = "int_width";
      description = "Internal Channel Width (must multiply by the \
                    number of coalesced words to get the total width)";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "Number of coalescing words";
      prefix = "num_coalesce";
      description = "Number of coalescing words to form the complete user word";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };

  reg {
    name = "Channel 18 Atom Description";
    prefix = "ch18_atom_desc";

    field {
      name = "Number of atoms inside the complete data word (int_width*num_coalesce)";
      prefix = "num_atoms";
      description = "Number of atoms inside the complete data word";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "Atom width";
      prefix = "atom_width";
      description = "Atom width in bits";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };

  -- Channel 19

  reg {
    name = "Channel 19 Description";
    prefix = "ch19_desc";

    field {
      name = "Channel Internal Width";
      prefix = "int_width";
      description = "Internal Channel Width (must multiply by the \
                    number of coalesced words to get the total width)";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "Number of coalescing words";
      prefix = "num_coalesce";
      description = "Number of coalescing words to form the complete user word";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };

  reg {
    name = "Channel 19 Atom Description";
    prefix = "ch19_atom_desc";

    field {
      name = "Number of atoms inside the complete data word (int_width*num_coalesce)";
      prefix = "num_atoms";
      description = "Number of atoms inside the complete data word";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "Atom width";
      prefix = "atom_width";
      description = "Atom width in bits";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };

  -- Channel 20

  reg {
    name = "Channel 20 Description";
    prefix = "ch20_desc";

    field {
      name = "Channel Internal Width";
      prefix = "int_width";
      description = "Internal Channel Width (must multiply by the \
                    number of coalesced words to get the total width)";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "Number of coalescing words";
      prefix = "num_coalesce";
      description = "Number of coalescing words to form the complete user word";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };

  reg {
    name = "Channel 20 Atom Description";
    prefix = "ch20_atom_desc";

    field {
      name = "Number of atoms inside the complete data word (int_width*num_coalesce)";
      prefix = "num_atoms";
      description = "Number of atoms inside the complete data word";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "Atom width";
      prefix = "atom_width";
      description = "Atom width in bits";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };

  -- Channel 21

  reg {
    name = "Channel 21 Description";
    prefix = "ch21_desc";

    field {
      name = "Channel Internal Width";
      prefix = "int_width";
      description = "Internal Channel Width (must multiply by the \
                    number of coalesced words to get the total width)";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "Number of coalescing words";
      prefix = "num_coalesce";
      description = "Number of coalescing words to form the complete user word";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };

  reg {
    name = "Channel 21 Atom Description";
    prefix = "ch21_atom_desc";

    field {
      name = "Number of atoms inside the complete data word (int_width*num_coalesce)";
      prefix = "num_atoms";
      description = "Number of atoms inside the complete data word";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "Atom width";
      prefix = "atom_width";
      description = "Atom width in bits";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };

  -- Channel 22

  reg {
    name = "Channel 22 Description";
    prefix = "ch22_desc";

    field {
      name = "Channel Internal Width";
      prefix = "int_width";
      description = "Internal Channel Width (must multiply by the \
                    number of coalesced words to get the total width)";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "Number of coalescing words";
      prefix = "num_coalesce";
      description = "Number of coalescing words to form the complete user word";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };

  reg {
    name = "Channel 22 Atom Description";
    prefix = "ch22_atom_desc";

    field {
      name = "Number of atoms inside the complete data word (int_width*num_coalesce)";
      prefix = "num_atoms";
      description = "Number of atoms inside the complete data word";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "Atom width";
      prefix = "atom_width";
      description = "Atom width in bits";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };

  -- Channel 23

  reg {
    name = "Channel 23 Description";
    prefix = "ch23_desc";

    field {
      name = "Channel Internal Width";
      prefix = "int_width";
      description = "Internal Channel Width (must multiply by the \
                    number of coalesced words to get the total width)";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "Number of coalescing words";
      prefix = "num_coalesce";
      description = "Number of coalescing words to form the complete user word";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };

  reg {
    name = "Channel 23 Atom Description";
    prefix = "ch23_atom_desc";

    field {
      name = "Number of atoms inside the complete data word (int_width*num_coalesce)";
      prefix = "num_atoms";
      description = "Number of atoms inside the complete data word";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };

    field {
      name = "Atom width";
      prefix = "atom_width";
      description = "Atom width in bits";
      type = SLV;
      size = 16;
      access_bus = READ_ONLY;
      access_dev = WRITE_ONLY;
    };
  };

};
