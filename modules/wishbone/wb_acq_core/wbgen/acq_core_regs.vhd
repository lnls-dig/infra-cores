---------------------------------------------------------------------------------------
-- Title          : Wishbone slave core for BPM FSM Acquisition registers
---------------------------------------------------------------------------------------
-- File           : acq_core_regs.vhd
-- Author         : auto-generated by wbgen2 from acq_core.wb
-- Created        : Tue Apr  4 13:59:43 2023
-- Standard       : VHDL'87
---------------------------------------------------------------------------------------
-- THIS FILE WAS GENERATED BY wbgen2 FROM SOURCE FILE acq_core.wb
-- DO NOT HAND-EDIT UNLESS IT'S ABSOLUTELY NECESSARY!
---------------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

use work.acq_core_wbgen2_pkg.all;


entity acq_core_regs is
  port (
    rst_n_i                                  : in     std_logic;
    clk_sys_i                                : in     std_logic;
    wb_adr_i                                 : in     std_logic_vector(5 downto 0);
    wb_dat_i                                 : in     std_logic_vector(31 downto 0);
    wb_dat_o                                 : out    std_logic_vector(31 downto 0);
    wb_cyc_i                                 : in     std_logic;
    wb_sel_i                                 : in     std_logic_vector(3 downto 0);
    wb_stb_i                                 : in     std_logic;
    wb_we_i                                  : in     std_logic;
    wb_ack_o                                 : out    std_logic;
    wb_err_o                                 : out    std_logic;
    wb_rty_o                                 : out    std_logic;
    wb_stall_o                               : out    std_logic;
    fs_clk_i                                 : in     std_logic;
    ext_clk_i                                : in     std_logic;
    regs_i                                   : in     t_acq_core_in_registers;
    regs_o                                   : out    t_acq_core_out_registers
  );
end acq_core_regs;

architecture syn of acq_core_regs is

signal acq_core_ctl_fsm_start_acq_int           : std_logic      ;
signal acq_core_ctl_fsm_start_acq_int_delay     : std_logic      ;
signal acq_core_ctl_fsm_start_acq_sync0         : std_logic      ;
signal acq_core_ctl_fsm_start_acq_sync1         : std_logic      ;
signal acq_core_ctl_fsm_start_acq_sync2         : std_logic      ;
signal acq_core_ctl_fsm_stop_acq_int            : std_logic      ;
signal acq_core_ctl_fsm_stop_acq_int_delay      : std_logic      ;
signal acq_core_ctl_fsm_stop_acq_sync0          : std_logic      ;
signal acq_core_ctl_fsm_stop_acq_sync1          : std_logic      ;
signal acq_core_ctl_fsm_stop_acq_sync2          : std_logic      ;
signal acq_core_ctl_reserved1_int               : std_logic_vector(13 downto 0);
signal acq_core_ctl_fsm_acq_now_int             : std_logic      ;
signal acq_core_ctl_fsm_acq_now_sync0           : std_logic      ;
signal acq_core_ctl_fsm_acq_now_sync1           : std_logic      ;
signal acq_core_ctl_reserved2_int               : std_logic_vector(14 downto 0);
signal acq_core_sta_fsm_state_int               : std_logic_vector(2 downto 0);
signal acq_core_sta_fsm_state_lwb               : std_logic      ;
signal acq_core_sta_fsm_state_lwb_delay         : std_logic      ;
signal acq_core_sta_fsm_state_lwb_in_progress   : std_logic      ;
signal acq_core_sta_fsm_state_lwb_s0            : std_logic      ;
signal acq_core_sta_fsm_state_lwb_s1            : std_logic      ;
signal acq_core_sta_fsm_state_lwb_s2            : std_logic      ;
signal acq_core_sta_fsm_acq_done_sync0          : std_logic      ;
signal acq_core_sta_fsm_acq_done_sync1          : std_logic      ;
signal acq_core_sta_fc_trans_done_sync0         : std_logic      ;
signal acq_core_sta_fc_trans_done_sync1         : std_logic      ;
signal acq_core_sta_fc_full_sync0               : std_logic      ;
signal acq_core_sta_fc_full_sync1               : std_logic      ;
signal acq_core_sta_ddr3_trans_done_sync0       : std_logic      ;
signal acq_core_sta_ddr3_trans_done_sync1       : std_logic      ;
signal acq_core_trig_cfg_hw_trig_sel_int        : std_logic      ;
signal acq_core_trig_cfg_hw_trig_sel_sync0      : std_logic      ;
signal acq_core_trig_cfg_hw_trig_sel_sync1      : std_logic      ;
signal acq_core_trig_cfg_hw_trig_pol_int        : std_logic      ;
signal acq_core_trig_cfg_hw_trig_pol_sync0      : std_logic      ;
signal acq_core_trig_cfg_hw_trig_pol_sync1      : std_logic      ;
signal acq_core_trig_cfg_hw_trig_en_int         : std_logic      ;
signal acq_core_trig_cfg_hw_trig_en_sync0       : std_logic      ;
signal acq_core_trig_cfg_hw_trig_en_sync1       : std_logic      ;
signal acq_core_trig_cfg_sw_trig_en_int         : std_logic      ;
signal acq_core_trig_cfg_sw_trig_en_sync0       : std_logic      ;
signal acq_core_trig_cfg_sw_trig_en_sync1       : std_logic      ;
signal acq_core_trig_cfg_int_trig_sel_int       : std_logic_vector(4 downto 0);
signal acq_core_trig_cfg_int_trig_sel_swb       : std_logic      ;
signal acq_core_trig_cfg_int_trig_sel_swb_delay : std_logic      ;
signal acq_core_trig_cfg_int_trig_sel_swb_s0    : std_logic      ;
signal acq_core_trig_cfg_int_trig_sel_swb_s1    : std_logic      ;
signal acq_core_trig_cfg_int_trig_sel_swb_s2    : std_logic      ;
signal acq_core_trig_cfg_reserved_int           : std_logic_vector(22 downto 0);
signal acq_core_trig_data_cfg_thres_filt_int    : std_logic_vector(7 downto 0);
signal acq_core_trig_data_cfg_thres_filt_swb    : std_logic      ;
signal acq_core_trig_data_cfg_thres_filt_swb_delay : std_logic      ;
signal acq_core_trig_data_cfg_thres_filt_swb_s0 : std_logic      ;
signal acq_core_trig_data_cfg_thres_filt_swb_s1 : std_logic      ;
signal acq_core_trig_data_cfg_thres_filt_swb_s2 : std_logic      ;
signal acq_core_trig_data_cfg_reserved_int      : std_logic_vector(23 downto 0);
signal acq_core_trig_data_thres_int             : std_logic_vector(31 downto 0);
signal acq_core_trig_data_thres_swb             : std_logic      ;
signal acq_core_trig_data_thres_swb_delay       : std_logic      ;
signal acq_core_trig_data_thres_swb_s0          : std_logic      ;
signal acq_core_trig_data_thres_swb_s1          : std_logic      ;
signal acq_core_trig_data_thres_swb_s2          : std_logic      ;
signal acq_core_trig_dly_int                    : std_logic_vector(31 downto 0);
signal acq_core_trig_dly_swb                    : std_logic      ;
signal acq_core_trig_dly_swb_delay              : std_logic      ;
signal acq_core_trig_dly_swb_s0                 : std_logic      ;
signal acq_core_trig_dly_swb_s1                 : std_logic      ;
signal acq_core_trig_dly_swb_s2                 : std_logic      ;
signal acq_core_sw_trig_wr_int                  : std_logic      ;
signal acq_core_sw_trig_wr_int_delay            : std_logic      ;
signal acq_core_sw_trig_wr_sync0                : std_logic      ;
signal acq_core_sw_trig_wr_sync1                : std_logic      ;
signal acq_core_sw_trig_wr_sync2                : std_logic      ;
signal acq_core_shots_nb_int                    : std_logic_vector(15 downto 0);
signal acq_core_shots_nb_swb                    : std_logic      ;
signal acq_core_shots_nb_swb_delay              : std_logic      ;
signal acq_core_shots_nb_swb_s0                 : std_logic      ;
signal acq_core_shots_nb_swb_s1                 : std_logic      ;
signal acq_core_shots_nb_swb_s2                 : std_logic      ;
signal acq_core_trig_pos_int                    : std_logic_vector(31 downto 0);
signal acq_core_trig_pos_lwb                    : std_logic      ;
signal acq_core_trig_pos_lwb_delay              : std_logic      ;
signal acq_core_trig_pos_lwb_in_progress        : std_logic      ;
signal acq_core_trig_pos_lwb_s0                 : std_logic      ;
signal acq_core_trig_pos_lwb_s1                 : std_logic      ;
signal acq_core_trig_pos_lwb_s2                 : std_logic      ;
signal acq_core_pre_samples_int                 : std_logic_vector(31 downto 0);
signal acq_core_pre_samples_swb                 : std_logic      ;
signal acq_core_pre_samples_swb_delay           : std_logic      ;
signal acq_core_pre_samples_swb_s0              : std_logic      ;
signal acq_core_pre_samples_swb_s1              : std_logic      ;
signal acq_core_pre_samples_swb_s2              : std_logic      ;
signal acq_core_post_samples_int                : std_logic_vector(31 downto 0);
signal acq_core_post_samples_swb                : std_logic      ;
signal acq_core_post_samples_swb_delay          : std_logic      ;
signal acq_core_post_samples_swb_s0             : std_logic      ;
signal acq_core_post_samples_swb_s1             : std_logic      ;
signal acq_core_post_samples_swb_s2             : std_logic      ;
signal acq_core_samples_cnt_int                 : std_logic_vector(31 downto 0);
signal acq_core_samples_cnt_lwb                 : std_logic      ;
signal acq_core_samples_cnt_lwb_delay           : std_logic      ;
signal acq_core_samples_cnt_lwb_in_progress     : std_logic      ;
signal acq_core_samples_cnt_lwb_s0              : std_logic      ;
signal acq_core_samples_cnt_lwb_s1              : std_logic      ;
signal acq_core_samples_cnt_lwb_s2              : std_logic      ;
signal acq_core_ddr3_start_addr_int             : std_logic_vector(31 downto 0);
signal acq_core_ddr3_start_addr_swb             : std_logic      ;
signal acq_core_ddr3_start_addr_swb_delay       : std_logic      ;
signal acq_core_ddr3_start_addr_swb_s0          : std_logic      ;
signal acq_core_ddr3_start_addr_swb_s1          : std_logic      ;
signal acq_core_ddr3_start_addr_swb_s2          : std_logic      ;
signal acq_core_ddr3_end_addr_int               : std_logic_vector(31 downto 0);
signal acq_core_ddr3_end_addr_swb               : std_logic      ;
signal acq_core_ddr3_end_addr_swb_delay         : std_logic      ;
signal acq_core_ddr3_end_addr_swb_s0            : std_logic      ;
signal acq_core_ddr3_end_addr_swb_s1            : std_logic      ;
signal acq_core_ddr3_end_addr_swb_s2            : std_logic      ;
signal acq_core_acq_chan_ctl_which_int          : std_logic_vector(4 downto 0);
signal acq_core_acq_chan_ctl_which_swb          : std_logic      ;
signal acq_core_acq_chan_ctl_which_swb_delay    : std_logic      ;
signal acq_core_acq_chan_ctl_which_swb_s0       : std_logic      ;
signal acq_core_acq_chan_ctl_which_swb_s1       : std_logic      ;
signal acq_core_acq_chan_ctl_which_swb_s2       : std_logic      ;
signal acq_core_acq_chan_ctl_reserved_int       : std_logic_vector(2 downto 0);
signal acq_core_acq_chan_ctl_dtrig_which_int    : std_logic_vector(4 downto 0);
signal acq_core_acq_chan_ctl_dtrig_which_swb    : std_logic      ;
signal acq_core_acq_chan_ctl_dtrig_which_swb_delay : std_logic      ;
signal acq_core_acq_chan_ctl_dtrig_which_swb_s0 : std_logic      ;
signal acq_core_acq_chan_ctl_dtrig_which_swb_s1 : std_logic      ;
signal acq_core_acq_chan_ctl_dtrig_which_swb_s2 : std_logic      ;
signal acq_core_acq_chan_ctl_reserved1_int      : std_logic_vector(2 downto 0);
signal acq_core_acq_chan_ctl_reserved2_int      : std_logic_vector(10 downto 0);
signal ack_sreg                                 : std_logic_vector(9 downto 0);
signal rddata_reg                               : std_logic_vector(31 downto 0);
signal wrdata_reg                               : std_logic_vector(31 downto 0);
signal bwsel_reg                                : std_logic_vector(3 downto 0);
signal rwaddr_reg                               : std_logic_vector(5 downto 0);
signal ack_in_progress                          : std_logic      ;
signal wr_int                                   : std_logic      ;
signal rd_int                                   : std_logic      ;
signal allones                                  : std_logic_vector(31 downto 0);
signal allzeros                                 : std_logic_vector(31 downto 0);

begin
-- Some internal signals assignments
  wrdata_reg <= wb_dat_i;
-- 
-- Main register bank access process.
  process (clk_sys_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      ack_sreg <= "0000000000";
      ack_in_progress <= '0';
      rddata_reg <= "00000000000000000000000000000000";
      acq_core_ctl_fsm_start_acq_int <= '0';
      acq_core_ctl_fsm_start_acq_int_delay <= '0';
      acq_core_ctl_fsm_stop_acq_int <= '0';
      acq_core_ctl_fsm_stop_acq_int_delay <= '0';
      acq_core_ctl_reserved1_int <= "00000000000000";
      acq_core_ctl_fsm_acq_now_int <= '0';
      acq_core_ctl_reserved2_int <= "000000000000000";
      acq_core_sta_fsm_state_lwb <= '0';
      acq_core_sta_fsm_state_lwb_delay <= '0';
      acq_core_sta_fsm_state_lwb_in_progress <= '0';
      acq_core_trig_cfg_hw_trig_sel_int <= '0';
      acq_core_trig_cfg_hw_trig_pol_int <= '0';
      acq_core_trig_cfg_hw_trig_en_int <= '0';
      acq_core_trig_cfg_sw_trig_en_int <= '0';
      acq_core_trig_cfg_int_trig_sel_int <= "00000";
      acq_core_trig_cfg_int_trig_sel_swb <= '0';
      acq_core_trig_cfg_int_trig_sel_swb_delay <= '0';
      acq_core_trig_cfg_reserved_int <= "00000000000000000000000";
      acq_core_trig_data_cfg_thres_filt_int <= "00000000";
      acq_core_trig_data_cfg_thres_filt_swb <= '0';
      acq_core_trig_data_cfg_thres_filt_swb_delay <= '0';
      acq_core_trig_data_cfg_reserved_int <= "000000000000000000000000";
      acq_core_trig_data_thres_int <= "00000000000000000000000000000000";
      acq_core_trig_data_thres_swb <= '0';
      acq_core_trig_data_thres_swb_delay <= '0';
      acq_core_trig_dly_int <= "00000000000000000000000000000000";
      acq_core_trig_dly_swb <= '0';
      acq_core_trig_dly_swb_delay <= '0';
      acq_core_sw_trig_wr_int <= '0';
      acq_core_sw_trig_wr_int_delay <= '0';
      acq_core_shots_nb_int <= "0000000000000000";
      acq_core_shots_nb_swb <= '0';
      acq_core_shots_nb_swb_delay <= '0';
      acq_core_trig_pos_lwb <= '0';
      acq_core_trig_pos_lwb_delay <= '0';
      acq_core_trig_pos_lwb_in_progress <= '0';
      acq_core_pre_samples_int <= "00000000000000000000000000000000";
      acq_core_pre_samples_swb <= '0';
      acq_core_pre_samples_swb_delay <= '0';
      acq_core_post_samples_int <= "00000000000000000000000000000000";
      acq_core_post_samples_swb <= '0';
      acq_core_post_samples_swb_delay <= '0';
      acq_core_samples_cnt_lwb <= '0';
      acq_core_samples_cnt_lwb_delay <= '0';
      acq_core_samples_cnt_lwb_in_progress <= '0';
      acq_core_ddr3_start_addr_int <= "00000000000000000000000000000000";
      acq_core_ddr3_start_addr_swb <= '0';
      acq_core_ddr3_start_addr_swb_delay <= '0';
      acq_core_ddr3_end_addr_int <= "00000000000000000000000000000000";
      acq_core_ddr3_end_addr_swb <= '0';
      acq_core_ddr3_end_addr_swb_delay <= '0';
      acq_core_acq_chan_ctl_which_int <= "00000";
      acq_core_acq_chan_ctl_which_swb <= '0';
      acq_core_acq_chan_ctl_which_swb_delay <= '0';
      acq_core_acq_chan_ctl_reserved_int <= "000";
      acq_core_acq_chan_ctl_dtrig_which_int <= "00000";
      acq_core_acq_chan_ctl_dtrig_which_swb <= '0';
      acq_core_acq_chan_ctl_dtrig_which_swb_delay <= '0';
      acq_core_acq_chan_ctl_reserved1_int <= "000";
      acq_core_acq_chan_ctl_reserved2_int <= "00000000000";
    elsif rising_edge(clk_sys_i) then
-- advance the ACK generator shift register
      ack_sreg(8 downto 0) <= ack_sreg(9 downto 1);
      ack_sreg(9) <= '0';
      if (ack_in_progress = '1') then
        if (ack_sreg(0) = '1') then
          ack_in_progress <= '0';
        else
          acq_core_ctl_fsm_start_acq_int <= acq_core_ctl_fsm_start_acq_int_delay;
          acq_core_ctl_fsm_start_acq_int_delay <= '0';
          acq_core_ctl_fsm_stop_acq_int <= acq_core_ctl_fsm_stop_acq_int_delay;
          acq_core_ctl_fsm_stop_acq_int_delay <= '0';
          acq_core_sta_fsm_state_lwb <= acq_core_sta_fsm_state_lwb_delay;
          acq_core_sta_fsm_state_lwb_delay <= '0';
          if ((ack_sreg(1) = '1') and (acq_core_sta_fsm_state_lwb_in_progress = '1')) then
            rddata_reg(2 downto 0) <= acq_core_sta_fsm_state_int;
            acq_core_sta_fsm_state_lwb_in_progress <= '0';
          end if;
          acq_core_trig_cfg_int_trig_sel_swb <= acq_core_trig_cfg_int_trig_sel_swb_delay;
          acq_core_trig_cfg_int_trig_sel_swb_delay <= '0';
          acq_core_trig_data_cfg_thres_filt_swb <= acq_core_trig_data_cfg_thres_filt_swb_delay;
          acq_core_trig_data_cfg_thres_filt_swb_delay <= '0';
          acq_core_trig_data_thres_swb <= acq_core_trig_data_thres_swb_delay;
          acq_core_trig_data_thres_swb_delay <= '0';
          acq_core_trig_dly_swb <= acq_core_trig_dly_swb_delay;
          acq_core_trig_dly_swb_delay <= '0';
          acq_core_sw_trig_wr_int <= acq_core_sw_trig_wr_int_delay;
          acq_core_sw_trig_wr_int_delay <= '0';
          acq_core_shots_nb_swb <= acq_core_shots_nb_swb_delay;
          acq_core_shots_nb_swb_delay <= '0';
          acq_core_trig_pos_lwb <= acq_core_trig_pos_lwb_delay;
          acq_core_trig_pos_lwb_delay <= '0';
          if ((ack_sreg(1) = '1') and (acq_core_trig_pos_lwb_in_progress = '1')) then
            rddata_reg(31 downto 0) <= acq_core_trig_pos_int;
            acq_core_trig_pos_lwb_in_progress <= '0';
          end if;
          acq_core_pre_samples_swb <= acq_core_pre_samples_swb_delay;
          acq_core_pre_samples_swb_delay <= '0';
          acq_core_post_samples_swb <= acq_core_post_samples_swb_delay;
          acq_core_post_samples_swb_delay <= '0';
          acq_core_samples_cnt_lwb <= acq_core_samples_cnt_lwb_delay;
          acq_core_samples_cnt_lwb_delay <= '0';
          if ((ack_sreg(1) = '1') and (acq_core_samples_cnt_lwb_in_progress = '1')) then
            rddata_reg(31 downto 0) <= acq_core_samples_cnt_int;
            acq_core_samples_cnt_lwb_in_progress <= '0';
          end if;
          acq_core_ddr3_start_addr_swb <= acq_core_ddr3_start_addr_swb_delay;
          acq_core_ddr3_start_addr_swb_delay <= '0';
          acq_core_ddr3_end_addr_swb <= acq_core_ddr3_end_addr_swb_delay;
          acq_core_ddr3_end_addr_swb_delay <= '0';
          acq_core_acq_chan_ctl_which_swb <= acq_core_acq_chan_ctl_which_swb_delay;
          acq_core_acq_chan_ctl_which_swb_delay <= '0';
          acq_core_acq_chan_ctl_dtrig_which_swb <= acq_core_acq_chan_ctl_dtrig_which_swb_delay;
          acq_core_acq_chan_ctl_dtrig_which_swb_delay <= '0';
        end if;
      else
        if ((wb_cyc_i = '1') and (wb_stb_i = '1')) then
          case rwaddr_reg(5 downto 0) is
          when "000000" => 
            if (wb_we_i = '1') then
              acq_core_ctl_fsm_start_acq_int <= wrdata_reg(0);
              acq_core_ctl_fsm_start_acq_int_delay <= wrdata_reg(0);
              acq_core_ctl_fsm_stop_acq_int <= wrdata_reg(1);
              acq_core_ctl_fsm_stop_acq_int_delay <= wrdata_reg(1);
              acq_core_ctl_reserved1_int <= wrdata_reg(15 downto 2);
              acq_core_ctl_fsm_acq_now_int <= wrdata_reg(16);
              acq_core_ctl_reserved2_int <= wrdata_reg(31 downto 17);
            end if;
            rddata_reg(0) <= '0';
            rddata_reg(1) <= '0';
            rddata_reg(15 downto 2) <= acq_core_ctl_reserved1_int;
            rddata_reg(16) <= acq_core_ctl_fsm_acq_now_int;
            rddata_reg(31 downto 17) <= acq_core_ctl_reserved2_int;
            ack_sreg(4) <= '1';
            ack_in_progress <= '1';
          when "000001" => 
            if (wb_we_i = '1') then
            end if;
            if (wb_we_i = '0') then
              acq_core_sta_fsm_state_lwb <= '1';
              acq_core_sta_fsm_state_lwb_delay <= '1';
              acq_core_sta_fsm_state_lwb_in_progress <= '1';
            end if;
            rddata_reg(3) <= acq_core_sta_fsm_acq_done_sync1;
            rddata_reg(4) <= regs_i.sta_fifo_we_i;
            rddata_reg(5) <= regs_i.sta_fifo_re_i;
            rddata_reg(6) <= regs_i.sta_fifo_fc_rd_en_i;
            rddata_reg(7) <= regs_i.sta_fifo_rd_empty_i;
            rddata_reg(8) <= acq_core_sta_fc_trans_done_sync1;
            rddata_reg(9) <= acq_core_sta_fc_full_sync1;
            rddata_reg(10) <= regs_i.sta_fifo_wr_full_i;
            rddata_reg(11) <= regs_i.sta_fifo_fc_valid_fwft_i;
            rddata_reg(12) <= regs_i.sta_source_pl_dreq_i;
            rddata_reg(13) <= regs_i.sta_source_pl_stall_i;
            rddata_reg(15 downto 14) <= regs_i.sta_reserved2_i;
            rddata_reg(16) <= acq_core_sta_ddr3_trans_done_sync1;
            rddata_reg(31 downto 17) <= regs_i.sta_fifo_wr_count_i;
            ack_sreg(5) <= '1';
            ack_in_progress <= '1';
          when "000010" => 
            if (wb_we_i = '1') then
              acq_core_trig_cfg_hw_trig_sel_int <= wrdata_reg(0);
              acq_core_trig_cfg_hw_trig_pol_int <= wrdata_reg(1);
              acq_core_trig_cfg_hw_trig_en_int <= wrdata_reg(2);
              acq_core_trig_cfg_sw_trig_en_int <= wrdata_reg(3);
              acq_core_trig_cfg_int_trig_sel_int <= wrdata_reg(8 downto 4);
              acq_core_trig_cfg_int_trig_sel_swb <= '1';
              acq_core_trig_cfg_int_trig_sel_swb_delay <= '1';
              acq_core_trig_cfg_reserved_int <= wrdata_reg(31 downto 9);
            end if;
            rddata_reg(0) <= acq_core_trig_cfg_hw_trig_sel_int;
            rddata_reg(1) <= acq_core_trig_cfg_hw_trig_pol_int;
            rddata_reg(2) <= acq_core_trig_cfg_hw_trig_en_int;
            rddata_reg(3) <= acq_core_trig_cfg_sw_trig_en_int;
            rddata_reg(8 downto 4) <= acq_core_trig_cfg_int_trig_sel_int;
            rddata_reg(31 downto 9) <= acq_core_trig_cfg_reserved_int;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "000011" => 
            if (wb_we_i = '1') then
              acq_core_trig_data_cfg_thres_filt_int <= wrdata_reg(7 downto 0);
              acq_core_trig_data_cfg_thres_filt_swb <= '1';
              acq_core_trig_data_cfg_thres_filt_swb_delay <= '1';
              acq_core_trig_data_cfg_reserved_int <= wrdata_reg(31 downto 8);
            end if;
            rddata_reg(7 downto 0) <= acq_core_trig_data_cfg_thres_filt_int;
            rddata_reg(31 downto 8) <= acq_core_trig_data_cfg_reserved_int;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "000100" => 
            if (wb_we_i = '1') then
              acq_core_trig_data_thres_int <= wrdata_reg(31 downto 0);
              acq_core_trig_data_thres_swb <= '1';
              acq_core_trig_data_thres_swb_delay <= '1';
            end if;
            rddata_reg(31 downto 0) <= acq_core_trig_data_thres_int;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "000101" => 
            if (wb_we_i = '1') then
              acq_core_trig_dly_int <= wrdata_reg(31 downto 0);
              acq_core_trig_dly_swb <= '1';
              acq_core_trig_dly_swb_delay <= '1';
            end if;
            rddata_reg(31 downto 0) <= acq_core_trig_dly_int;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "000110" => 
            if (wb_we_i = '1') then
              acq_core_sw_trig_wr_int <= '1';
              acq_core_sw_trig_wr_int_delay <= '1';
            end if;
            rddata_reg(0) <= 'X';
            rddata_reg(1) <= 'X';
            rddata_reg(2) <= 'X';
            rddata_reg(3) <= 'X';
            rddata_reg(4) <= 'X';
            rddata_reg(5) <= 'X';
            rddata_reg(6) <= 'X';
            rddata_reg(7) <= 'X';
            rddata_reg(8) <= 'X';
            rddata_reg(9) <= 'X';
            rddata_reg(10) <= 'X';
            rddata_reg(11) <= 'X';
            rddata_reg(12) <= 'X';
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(16) <= 'X';
            rddata_reg(17) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "000111" => 
            if (wb_we_i = '1') then
              acq_core_shots_nb_int <= wrdata_reg(15 downto 0);
              acq_core_shots_nb_swb <= '1';
              acq_core_shots_nb_swb_delay <= '1';
            end if;
            rddata_reg(15 downto 0) <= acq_core_shots_nb_int;
            rddata_reg(16) <= regs_i.shots_multishot_ram_size_impl_i;
            rddata_reg(31 downto 17) <= regs_i.shots_multishot_ram_size_i;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "001000" => 
            if (wb_we_i = '1') then
            end if;
            if (wb_we_i = '0') then
              acq_core_trig_pos_lwb <= '1';
              acq_core_trig_pos_lwb_delay <= '1';
              acq_core_trig_pos_lwb_in_progress <= '1';
            end if;
            ack_sreg(5) <= '1';
            ack_in_progress <= '1';
          when "001001" => 
            if (wb_we_i = '1') then
              acq_core_pre_samples_int <= wrdata_reg(31 downto 0);
              acq_core_pre_samples_swb <= '1';
              acq_core_pre_samples_swb_delay <= '1';
            end if;
            rddata_reg(31 downto 0) <= acq_core_pre_samples_int;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "001010" => 
            if (wb_we_i = '1') then
              acq_core_post_samples_int <= wrdata_reg(31 downto 0);
              acq_core_post_samples_swb <= '1';
              acq_core_post_samples_swb_delay <= '1';
            end if;
            rddata_reg(31 downto 0) <= acq_core_post_samples_int;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "001011" => 
            if (wb_we_i = '1') then
            end if;
            if (wb_we_i = '0') then
              acq_core_samples_cnt_lwb <= '1';
              acq_core_samples_cnt_lwb_delay <= '1';
              acq_core_samples_cnt_lwb_in_progress <= '1';
            end if;
            ack_sreg(5) <= '1';
            ack_in_progress <= '1';
          when "001100" => 
            if (wb_we_i = '1') then
              acq_core_ddr3_start_addr_int <= wrdata_reg(31 downto 0);
              acq_core_ddr3_start_addr_swb <= '1';
              acq_core_ddr3_start_addr_swb_delay <= '1';
            end if;
            rddata_reg(31 downto 0) <= acq_core_ddr3_start_addr_int;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "001101" => 
            if (wb_we_i = '1') then
              acq_core_ddr3_end_addr_int <= wrdata_reg(31 downto 0);
              acq_core_ddr3_end_addr_swb <= '1';
              acq_core_ddr3_end_addr_swb_delay <= '1';
            end if;
            rddata_reg(31 downto 0) <= acq_core_ddr3_end_addr_int;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "001110" => 
            if (wb_we_i = '1') then
              acq_core_acq_chan_ctl_which_int <= wrdata_reg(4 downto 0);
              acq_core_acq_chan_ctl_which_swb <= '1';
              acq_core_acq_chan_ctl_which_swb_delay <= '1';
              acq_core_acq_chan_ctl_reserved_int <= wrdata_reg(7 downto 5);
              acq_core_acq_chan_ctl_dtrig_which_int <= wrdata_reg(12 downto 8);
              acq_core_acq_chan_ctl_dtrig_which_swb <= '1';
              acq_core_acq_chan_ctl_dtrig_which_swb_delay <= '1';
              acq_core_acq_chan_ctl_reserved1_int <= wrdata_reg(15 downto 13);
              acq_core_acq_chan_ctl_reserved2_int <= wrdata_reg(31 downto 21);
            end if;
            rddata_reg(4 downto 0) <= acq_core_acq_chan_ctl_which_int;
            rddata_reg(7 downto 5) <= acq_core_acq_chan_ctl_reserved_int;
            rddata_reg(12 downto 8) <= acq_core_acq_chan_ctl_dtrig_which_int;
            rddata_reg(15 downto 13) <= acq_core_acq_chan_ctl_reserved1_int;
            rddata_reg(20 downto 16) <= regs_i.acq_chan_ctl_num_chan_i;
            rddata_reg(31 downto 21) <= acq_core_acq_chan_ctl_reserved2_int;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "001111" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(15 downto 0) <= regs_i.ch0_desc_int_width_i;
            rddata_reg(31 downto 16) <= regs_i.ch0_desc_num_coalesce_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "010000" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(15 downto 0) <= regs_i.ch0_atom_desc_num_atoms_i;
            rddata_reg(31 downto 16) <= regs_i.ch0_atom_desc_atom_width_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "010001" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(15 downto 0) <= regs_i.ch1_desc_int_width_i;
            rddata_reg(31 downto 16) <= regs_i.ch1_desc_num_coalesce_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "010010" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(15 downto 0) <= regs_i.ch1_atom_desc_num_atoms_i;
            rddata_reg(31 downto 16) <= regs_i.ch1_atom_desc_atom_width_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "010011" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(15 downto 0) <= regs_i.ch2_desc_int_width_i;
            rddata_reg(31 downto 16) <= regs_i.ch2_desc_num_coalesce_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "010100" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(15 downto 0) <= regs_i.ch2_atom_desc_num_atoms_i;
            rddata_reg(31 downto 16) <= regs_i.ch2_atom_desc_atom_width_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "010101" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(15 downto 0) <= regs_i.ch3_desc_int_width_i;
            rddata_reg(31 downto 16) <= regs_i.ch3_desc_num_coalesce_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "010110" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(15 downto 0) <= regs_i.ch3_atom_desc_num_atoms_i;
            rddata_reg(31 downto 16) <= regs_i.ch3_atom_desc_atom_width_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "010111" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(15 downto 0) <= regs_i.ch4_desc_int_width_i;
            rddata_reg(31 downto 16) <= regs_i.ch4_desc_num_coalesce_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "011000" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(15 downto 0) <= regs_i.ch4_atom_desc_num_atoms_i;
            rddata_reg(31 downto 16) <= regs_i.ch4_atom_desc_atom_width_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "011001" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(15 downto 0) <= regs_i.ch5_desc_int_width_i;
            rddata_reg(31 downto 16) <= regs_i.ch5_desc_num_coalesce_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "011010" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(15 downto 0) <= regs_i.ch5_atom_desc_num_atoms_i;
            rddata_reg(31 downto 16) <= regs_i.ch5_atom_desc_atom_width_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "011011" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(15 downto 0) <= regs_i.ch6_desc_int_width_i;
            rddata_reg(31 downto 16) <= regs_i.ch6_desc_num_coalesce_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "011100" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(15 downto 0) <= regs_i.ch6_atom_desc_num_atoms_i;
            rddata_reg(31 downto 16) <= regs_i.ch6_atom_desc_atom_width_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "011101" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(15 downto 0) <= regs_i.ch7_desc_int_width_i;
            rddata_reg(31 downto 16) <= regs_i.ch7_desc_num_coalesce_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "011110" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(15 downto 0) <= regs_i.ch7_atom_desc_num_atoms_i;
            rddata_reg(31 downto 16) <= regs_i.ch7_atom_desc_atom_width_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "011111" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(15 downto 0) <= regs_i.ch8_desc_int_width_i;
            rddata_reg(31 downto 16) <= regs_i.ch8_desc_num_coalesce_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "100000" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(15 downto 0) <= regs_i.ch8_atom_desc_num_atoms_i;
            rddata_reg(31 downto 16) <= regs_i.ch8_atom_desc_atom_width_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "100001" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(15 downto 0) <= regs_i.ch9_desc_int_width_i;
            rddata_reg(31 downto 16) <= regs_i.ch9_desc_num_coalesce_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "100010" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(15 downto 0) <= regs_i.ch9_atom_desc_num_atoms_i;
            rddata_reg(31 downto 16) <= regs_i.ch9_atom_desc_atom_width_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "100011" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(15 downto 0) <= regs_i.ch10_desc_int_width_i;
            rddata_reg(31 downto 16) <= regs_i.ch10_desc_num_coalesce_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "100100" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(15 downto 0) <= regs_i.ch10_atom_desc_num_atoms_i;
            rddata_reg(31 downto 16) <= regs_i.ch10_atom_desc_atom_width_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "100101" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(15 downto 0) <= regs_i.ch11_desc_int_width_i;
            rddata_reg(31 downto 16) <= regs_i.ch11_desc_num_coalesce_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "100110" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(15 downto 0) <= regs_i.ch11_atom_desc_num_atoms_i;
            rddata_reg(31 downto 16) <= regs_i.ch11_atom_desc_atom_width_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "100111" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(15 downto 0) <= regs_i.ch12_desc_int_width_i;
            rddata_reg(31 downto 16) <= regs_i.ch12_desc_num_coalesce_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "101000" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(15 downto 0) <= regs_i.ch12_atom_desc_num_atoms_i;
            rddata_reg(31 downto 16) <= regs_i.ch12_atom_desc_atom_width_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "101001" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(15 downto 0) <= regs_i.ch13_desc_int_width_i;
            rddata_reg(31 downto 16) <= regs_i.ch13_desc_num_coalesce_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "101010" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(15 downto 0) <= regs_i.ch13_atom_desc_num_atoms_i;
            rddata_reg(31 downto 16) <= regs_i.ch13_atom_desc_atom_width_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "101011" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(15 downto 0) <= regs_i.ch14_desc_int_width_i;
            rddata_reg(31 downto 16) <= regs_i.ch14_desc_num_coalesce_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "101100" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(15 downto 0) <= regs_i.ch14_atom_desc_num_atoms_i;
            rddata_reg(31 downto 16) <= regs_i.ch14_atom_desc_atom_width_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "101101" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(15 downto 0) <= regs_i.ch15_desc_int_width_i;
            rddata_reg(31 downto 16) <= regs_i.ch15_desc_num_coalesce_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "101110" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(15 downto 0) <= regs_i.ch15_atom_desc_num_atoms_i;
            rddata_reg(31 downto 16) <= regs_i.ch15_atom_desc_atom_width_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "101111" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(15 downto 0) <= regs_i.ch16_desc_int_width_i;
            rddata_reg(31 downto 16) <= regs_i.ch16_desc_num_coalesce_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "110000" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(15 downto 0) <= regs_i.ch16_atom_desc_num_atoms_i;
            rddata_reg(31 downto 16) <= regs_i.ch16_atom_desc_atom_width_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "110001" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(15 downto 0) <= regs_i.ch17_desc_int_width_i;
            rddata_reg(31 downto 16) <= regs_i.ch17_desc_num_coalesce_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "110010" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(15 downto 0) <= regs_i.ch17_atom_desc_num_atoms_i;
            rddata_reg(31 downto 16) <= regs_i.ch17_atom_desc_atom_width_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "110011" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(15 downto 0) <= regs_i.ch18_desc_int_width_i;
            rddata_reg(31 downto 16) <= regs_i.ch18_desc_num_coalesce_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "110100" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(15 downto 0) <= regs_i.ch18_atom_desc_num_atoms_i;
            rddata_reg(31 downto 16) <= regs_i.ch18_atom_desc_atom_width_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "110101" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(15 downto 0) <= regs_i.ch19_desc_int_width_i;
            rddata_reg(31 downto 16) <= regs_i.ch19_desc_num_coalesce_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "110110" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(15 downto 0) <= regs_i.ch19_atom_desc_num_atoms_i;
            rddata_reg(31 downto 16) <= regs_i.ch19_atom_desc_atom_width_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "110111" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(15 downto 0) <= regs_i.ch20_desc_int_width_i;
            rddata_reg(31 downto 16) <= regs_i.ch20_desc_num_coalesce_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "111000" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(15 downto 0) <= regs_i.ch20_atom_desc_num_atoms_i;
            rddata_reg(31 downto 16) <= regs_i.ch20_atom_desc_atom_width_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "111001" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(15 downto 0) <= regs_i.ch21_desc_int_width_i;
            rddata_reg(31 downto 16) <= regs_i.ch21_desc_num_coalesce_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "111010" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(15 downto 0) <= regs_i.ch21_atom_desc_num_atoms_i;
            rddata_reg(31 downto 16) <= regs_i.ch21_atom_desc_atom_width_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "111011" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(15 downto 0) <= regs_i.ch22_desc_int_width_i;
            rddata_reg(31 downto 16) <= regs_i.ch22_desc_num_coalesce_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "111100" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(15 downto 0) <= regs_i.ch22_atom_desc_num_atoms_i;
            rddata_reg(31 downto 16) <= regs_i.ch22_atom_desc_atom_width_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "111101" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(15 downto 0) <= regs_i.ch23_desc_int_width_i;
            rddata_reg(31 downto 16) <= regs_i.ch23_desc_num_coalesce_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "111110" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(15 downto 0) <= regs_i.ch23_atom_desc_num_atoms_i;
            rddata_reg(31 downto 16) <= regs_i.ch23_atom_desc_atom_width_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when others =>
-- prevent the slave from hanging the bus on invalid address
            ack_in_progress <= '1';
            ack_sreg(0) <= '1';
          end case;
        end if;
      end if;
    end if;
  end process;
  
  
-- Drive the data output bus
  wb_dat_o <= rddata_reg;
-- State machine acquisition_start command (ignore on read)
  process (fs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      regs_o.ctl_fsm_start_acq_o <= '0';
      acq_core_ctl_fsm_start_acq_sync0 <= '0';
      acq_core_ctl_fsm_start_acq_sync1 <= '0';
      acq_core_ctl_fsm_start_acq_sync2 <= '0';
    elsif rising_edge(fs_clk_i) then
      acq_core_ctl_fsm_start_acq_sync0 <= acq_core_ctl_fsm_start_acq_int;
      acq_core_ctl_fsm_start_acq_sync1 <= acq_core_ctl_fsm_start_acq_sync0;
      acq_core_ctl_fsm_start_acq_sync2 <= acq_core_ctl_fsm_start_acq_sync1;
      regs_o.ctl_fsm_start_acq_o <= acq_core_ctl_fsm_start_acq_sync2 and (not acq_core_ctl_fsm_start_acq_sync1);
    end if;
  end process;
  
  
-- State machine stop command (ignore on read)
  process (fs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      regs_o.ctl_fsm_stop_acq_o <= '0';
      acq_core_ctl_fsm_stop_acq_sync0 <= '0';
      acq_core_ctl_fsm_stop_acq_sync1 <= '0';
      acq_core_ctl_fsm_stop_acq_sync2 <= '0';
    elsif rising_edge(fs_clk_i) then
      acq_core_ctl_fsm_stop_acq_sync0 <= acq_core_ctl_fsm_stop_acq_int;
      acq_core_ctl_fsm_stop_acq_sync1 <= acq_core_ctl_fsm_stop_acq_sync0;
      acq_core_ctl_fsm_stop_acq_sync2 <= acq_core_ctl_fsm_stop_acq_sync1;
      regs_o.ctl_fsm_stop_acq_o <= acq_core_ctl_fsm_stop_acq_sync2 and (not acq_core_ctl_fsm_stop_acq_sync1);
    end if;
  end process;
  
  
-- Reserved1
  regs_o.ctl_reserved1_o <= acq_core_ctl_reserved1_int;
-- Acquire data immediately and don't wait for any trigger (ignore on read)
-- synchronizer chain for field : Acquire data immediately and don't wait for any trigger (ignore on read) (type RW/RO, clk_sys_i <-> fs_clk_i)
  process (fs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      regs_o.ctl_fsm_acq_now_o <= '0';
      acq_core_ctl_fsm_acq_now_sync0 <= '0';
      acq_core_ctl_fsm_acq_now_sync1 <= '0';
    elsif rising_edge(fs_clk_i) then
      acq_core_ctl_fsm_acq_now_sync0 <= acq_core_ctl_fsm_acq_now_int;
      acq_core_ctl_fsm_acq_now_sync1 <= acq_core_ctl_fsm_acq_now_sync0;
      regs_o.ctl_fsm_acq_now_o <= acq_core_ctl_fsm_acq_now_sync1;
    end if;
  end process;
  
  
-- Reserved2
  regs_o.ctl_reserved2_o <= acq_core_ctl_reserved2_int;
-- State machine status
-- asynchronous std_logic_vector register : State machine status (type RO/WO, fs_clk_i <-> clk_sys_i)
  process (fs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      acq_core_sta_fsm_state_lwb_s0 <= '0';
      acq_core_sta_fsm_state_lwb_s1 <= '0';
      acq_core_sta_fsm_state_lwb_s2 <= '0';
      acq_core_sta_fsm_state_int <= "000";
    elsif rising_edge(fs_clk_i) then
      acq_core_sta_fsm_state_lwb_s0 <= acq_core_sta_fsm_state_lwb;
      acq_core_sta_fsm_state_lwb_s1 <= acq_core_sta_fsm_state_lwb_s0;
      acq_core_sta_fsm_state_lwb_s2 <= acq_core_sta_fsm_state_lwb_s1;
      if ((acq_core_sta_fsm_state_lwb_s1 = '1') and (acq_core_sta_fsm_state_lwb_s2 = '0')) then
        acq_core_sta_fsm_state_int <= regs_i.sta_fsm_state_i;
      end if;
    end if;
  end process;
  
  
-- FSM acquisition status
-- synchronizer chain for field : FSM acquisition status (type RO/WO, fs_clk_i -> clk_sys_i)
  process (fs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      acq_core_sta_fsm_acq_done_sync0 <= '0';
      acq_core_sta_fsm_acq_done_sync1 <= '0';
    elsif rising_edge(fs_clk_i) then
      acq_core_sta_fsm_acq_done_sync0 <= regs_i.sta_fsm_acq_done_i;
      acq_core_sta_fsm_acq_done_sync1 <= acq_core_sta_fsm_acq_done_sync0;
    end if;
  end process;
  
  
-- FIFO write enable
-- FIFO read enable
-- FIFO flow control read enable
-- FIFO empty
-- External flow control transfer status
-- synchronizer chain for field : External flow control transfer status (type RO/WO, fs_clk_i -> clk_sys_i)
  process (fs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      acq_core_sta_fc_trans_done_sync0 <= '0';
      acq_core_sta_fc_trans_done_sync1 <= '0';
    elsif rising_edge(fs_clk_i) then
      acq_core_sta_fc_trans_done_sync0 <= regs_i.sta_fc_trans_done_i;
      acq_core_sta_fc_trans_done_sync1 <= acq_core_sta_fc_trans_done_sync0;
    end if;
  end process;
  
  
-- External flow control FIFO full status
-- synchronizer chain for field : External flow control FIFO full status (type RO/WO, fs_clk_i -> clk_sys_i)
  process (fs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      acq_core_sta_fc_full_sync0 <= '0';
      acq_core_sta_fc_full_sync1 <= '0';
    elsif rising_edge(fs_clk_i) then
      acq_core_sta_fc_full_sync0 <= regs_i.sta_fc_full_i;
      acq_core_sta_fc_full_sync1 <= acq_core_sta_fc_full_sync0;
    end if;
  end process;
  
  
-- FIFO write full
-- FWFT FIFO valid output
-- Flow control data required
-- Flow control stall
-- Reserved
-- DDR3 transfer status
-- synchronizer chain for field : DDR3 transfer status (type RO/WO, fs_clk_i -> clk_sys_i)
  process (fs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      acq_core_sta_ddr3_trans_done_sync0 <= '0';
      acq_core_sta_ddr3_trans_done_sync1 <= '0';
    elsif rising_edge(fs_clk_i) then
      acq_core_sta_ddr3_trans_done_sync0 <= regs_i.sta_ddr3_trans_done_i;
      acq_core_sta_ddr3_trans_done_sync1 <= acq_core_sta_ddr3_trans_done_sync0;
    end if;
  end process;
  
  
-- FIFO write count
-- Hardware trigger selection
-- synchronizer chain for field : Hardware trigger selection (type RW/RO, clk_sys_i <-> fs_clk_i)
  process (fs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      regs_o.trig_cfg_hw_trig_sel_o <= '0';
      acq_core_trig_cfg_hw_trig_sel_sync0 <= '0';
      acq_core_trig_cfg_hw_trig_sel_sync1 <= '0';
    elsif rising_edge(fs_clk_i) then
      acq_core_trig_cfg_hw_trig_sel_sync0 <= acq_core_trig_cfg_hw_trig_sel_int;
      acq_core_trig_cfg_hw_trig_sel_sync1 <= acq_core_trig_cfg_hw_trig_sel_sync0;
      regs_o.trig_cfg_hw_trig_sel_o <= acq_core_trig_cfg_hw_trig_sel_sync1;
    end if;
  end process;
  
  
-- Hardware trigger polarity
-- synchronizer chain for field : Hardware trigger polarity (type RW/RO, clk_sys_i <-> fs_clk_i)
  process (fs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      regs_o.trig_cfg_hw_trig_pol_o <= '0';
      acq_core_trig_cfg_hw_trig_pol_sync0 <= '0';
      acq_core_trig_cfg_hw_trig_pol_sync1 <= '0';
    elsif rising_edge(fs_clk_i) then
      acq_core_trig_cfg_hw_trig_pol_sync0 <= acq_core_trig_cfg_hw_trig_pol_int;
      acq_core_trig_cfg_hw_trig_pol_sync1 <= acq_core_trig_cfg_hw_trig_pol_sync0;
      regs_o.trig_cfg_hw_trig_pol_o <= acq_core_trig_cfg_hw_trig_pol_sync1;
    end if;
  end process;
  
  
-- Hardware trigger enable
-- synchronizer chain for field : Hardware trigger enable (type RW/RO, clk_sys_i <-> fs_clk_i)
  process (fs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      regs_o.trig_cfg_hw_trig_en_o <= '0';
      acq_core_trig_cfg_hw_trig_en_sync0 <= '0';
      acq_core_trig_cfg_hw_trig_en_sync1 <= '0';
    elsif rising_edge(fs_clk_i) then
      acq_core_trig_cfg_hw_trig_en_sync0 <= acq_core_trig_cfg_hw_trig_en_int;
      acq_core_trig_cfg_hw_trig_en_sync1 <= acq_core_trig_cfg_hw_trig_en_sync0;
      regs_o.trig_cfg_hw_trig_en_o <= acq_core_trig_cfg_hw_trig_en_sync1;
    end if;
  end process;
  
  
-- Software trigger enable
-- synchronizer chain for field : Software trigger enable (type RW/RO, clk_sys_i <-> fs_clk_i)
  process (fs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      regs_o.trig_cfg_sw_trig_en_o <= '0';
      acq_core_trig_cfg_sw_trig_en_sync0 <= '0';
      acq_core_trig_cfg_sw_trig_en_sync1 <= '0';
    elsif rising_edge(fs_clk_i) then
      acq_core_trig_cfg_sw_trig_en_sync0 <= acq_core_trig_cfg_sw_trig_en_int;
      acq_core_trig_cfg_sw_trig_en_sync1 <= acq_core_trig_cfg_sw_trig_en_sync0;
      regs_o.trig_cfg_sw_trig_en_o <= acq_core_trig_cfg_sw_trig_en_sync1;
    end if;
  end process;
  
  
-- Atom selection for internal trigger (atom within the channel selected by DTRIG_WHICH)
-- asynchronous std_logic_vector register : Atom selection for internal trigger (atom within the channel selected by DTRIG_WHICH) (type RW/RO, fs_clk_i <-> clk_sys_i)
  process (fs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      acq_core_trig_cfg_int_trig_sel_swb_s0 <= '0';
      acq_core_trig_cfg_int_trig_sel_swb_s1 <= '0';
      acq_core_trig_cfg_int_trig_sel_swb_s2 <= '0';
      regs_o.trig_cfg_int_trig_sel_o <= "00000";
    elsif rising_edge(fs_clk_i) then
      acq_core_trig_cfg_int_trig_sel_swb_s0 <= acq_core_trig_cfg_int_trig_sel_swb;
      acq_core_trig_cfg_int_trig_sel_swb_s1 <= acq_core_trig_cfg_int_trig_sel_swb_s0;
      acq_core_trig_cfg_int_trig_sel_swb_s2 <= acq_core_trig_cfg_int_trig_sel_swb_s1;
      if ((acq_core_trig_cfg_int_trig_sel_swb_s2 = '0') and (acq_core_trig_cfg_int_trig_sel_swb_s1 = '1')) then
        regs_o.trig_cfg_int_trig_sel_o <= acq_core_trig_cfg_int_trig_sel_int;
      end if;
    end if;
  end process;
  
  
-- Reserved
  regs_o.trig_cfg_reserved_o <= acq_core_trig_cfg_reserved_int;
-- Internal trigger threshold glitch filter
-- asynchronous std_logic_vector register : Internal trigger threshold glitch filter (type RW/RO, fs_clk_i <-> clk_sys_i)
  process (fs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      acq_core_trig_data_cfg_thres_filt_swb_s0 <= '0';
      acq_core_trig_data_cfg_thres_filt_swb_s1 <= '0';
      acq_core_trig_data_cfg_thres_filt_swb_s2 <= '0';
      regs_o.trig_data_cfg_thres_filt_o <= "00000000";
    elsif rising_edge(fs_clk_i) then
      acq_core_trig_data_cfg_thres_filt_swb_s0 <= acq_core_trig_data_cfg_thres_filt_swb;
      acq_core_trig_data_cfg_thres_filt_swb_s1 <= acq_core_trig_data_cfg_thres_filt_swb_s0;
      acq_core_trig_data_cfg_thres_filt_swb_s2 <= acq_core_trig_data_cfg_thres_filt_swb_s1;
      if ((acq_core_trig_data_cfg_thres_filt_swb_s2 = '0') and (acq_core_trig_data_cfg_thres_filt_swb_s1 = '1')) then
        regs_o.trig_data_cfg_thres_filt_o <= acq_core_trig_data_cfg_thres_filt_int;
      end if;
    end if;
  end process;
  
  
-- Reserved
  regs_o.trig_data_cfg_reserved_o <= acq_core_trig_data_cfg_reserved_int;
-- Threshold for internal trigger
-- asynchronous std_logic_vector register : Threshold for internal trigger (type RW/RO, fs_clk_i <-> clk_sys_i)
  process (fs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      acq_core_trig_data_thres_swb_s0 <= '0';
      acq_core_trig_data_thres_swb_s1 <= '0';
      acq_core_trig_data_thres_swb_s2 <= '0';
      regs_o.trig_data_thres_o <= "00000000000000000000000000000000";
    elsif rising_edge(fs_clk_i) then
      acq_core_trig_data_thres_swb_s0 <= acq_core_trig_data_thres_swb;
      acq_core_trig_data_thres_swb_s1 <= acq_core_trig_data_thres_swb_s0;
      acq_core_trig_data_thres_swb_s2 <= acq_core_trig_data_thres_swb_s1;
      if ((acq_core_trig_data_thres_swb_s2 = '0') and (acq_core_trig_data_thres_swb_s1 = '1')) then
        regs_o.trig_data_thres_o <= acq_core_trig_data_thres_int;
      end if;
    end if;
  end process;
  
  
-- Trigger delay value
-- asynchronous std_logic_vector register : Trigger delay value (type RW/RO, fs_clk_i <-> clk_sys_i)
  process (fs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      acq_core_trig_dly_swb_s0 <= '0';
      acq_core_trig_dly_swb_s1 <= '0';
      acq_core_trig_dly_swb_s2 <= '0';
      regs_o.trig_dly_o <= "00000000000000000000000000000000";
    elsif rising_edge(fs_clk_i) then
      acq_core_trig_dly_swb_s0 <= acq_core_trig_dly_swb;
      acq_core_trig_dly_swb_s1 <= acq_core_trig_dly_swb_s0;
      acq_core_trig_dly_swb_s2 <= acq_core_trig_dly_swb_s1;
      if ((acq_core_trig_dly_swb_s2 = '0') and (acq_core_trig_dly_swb_s1 = '1')) then
        regs_o.trig_dly_o <= acq_core_trig_dly_int;
      end if;
    end if;
  end process;
  
  
-- Software trigger (ignore on read)
-- pass-through field: Software trigger (ignore on read) in register: Software trigger
  regs_o.sw_trig_o <= wrdata_reg(31 downto 0);
  process (fs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      acq_core_sw_trig_wr_sync0 <= '0';
      acq_core_sw_trig_wr_sync1 <= '0';
      acq_core_sw_trig_wr_sync2 <= '0';
    elsif rising_edge(fs_clk_i) then
      acq_core_sw_trig_wr_sync0 <= acq_core_sw_trig_wr_int;
      acq_core_sw_trig_wr_sync1 <= acq_core_sw_trig_wr_sync0;
      acq_core_sw_trig_wr_sync2 <= acq_core_sw_trig_wr_sync1;
      regs_o.sw_trig_wr_o <= acq_core_sw_trig_wr_sync1 and (not acq_core_sw_trig_wr_sync2);
    end if;
  end process;
  
  
-- Number of shots
-- asynchronous std_logic_vector register : Number of shots (type RW/RO, fs_clk_i <-> clk_sys_i)
  process (fs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      acq_core_shots_nb_swb_s0 <= '0';
      acq_core_shots_nb_swb_s1 <= '0';
      acq_core_shots_nb_swb_s2 <= '0';
      regs_o.shots_nb_o <= "0000000000000000";
    elsif rising_edge(fs_clk_i) then
      acq_core_shots_nb_swb_s0 <= acq_core_shots_nb_swb;
      acq_core_shots_nb_swb_s1 <= acq_core_shots_nb_swb_s0;
      acq_core_shots_nb_swb_s2 <= acq_core_shots_nb_swb_s1;
      if ((acq_core_shots_nb_swb_s2 = '0') and (acq_core_shots_nb_swb_s1 = '1')) then
        regs_o.shots_nb_o <= acq_core_shots_nb_int;
      end if;
    end if;
  end process;
  
  
-- MultiShot RAM size implemented
-- MultiShot RAM size
-- Trigger address
-- asynchronous std_logic_vector register : Trigger address (type RO/WO, fs_clk_i <-> clk_sys_i)
  process (fs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      acq_core_trig_pos_lwb_s0 <= '0';
      acq_core_trig_pos_lwb_s1 <= '0';
      acq_core_trig_pos_lwb_s2 <= '0';
      acq_core_trig_pos_int <= "00000000000000000000000000000000";
    elsif rising_edge(fs_clk_i) then
      acq_core_trig_pos_lwb_s0 <= acq_core_trig_pos_lwb;
      acq_core_trig_pos_lwb_s1 <= acq_core_trig_pos_lwb_s0;
      acq_core_trig_pos_lwb_s2 <= acq_core_trig_pos_lwb_s1;
      if ((acq_core_trig_pos_lwb_s1 = '1') and (acq_core_trig_pos_lwb_s2 = '0')) then
        acq_core_trig_pos_int <= regs_i.trig_pos_i;
      end if;
    end if;
  end process;
  
  
-- Pre-trigger samples
-- asynchronous std_logic_vector register : Pre-trigger samples (type RW/RO, fs_clk_i <-> clk_sys_i)
  process (fs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      acq_core_pre_samples_swb_s0 <= '0';
      acq_core_pre_samples_swb_s1 <= '0';
      acq_core_pre_samples_swb_s2 <= '0';
      regs_o.pre_samples_o <= "00000000000000000000000000000000";
    elsif rising_edge(fs_clk_i) then
      acq_core_pre_samples_swb_s0 <= acq_core_pre_samples_swb;
      acq_core_pre_samples_swb_s1 <= acq_core_pre_samples_swb_s0;
      acq_core_pre_samples_swb_s2 <= acq_core_pre_samples_swb_s1;
      if ((acq_core_pre_samples_swb_s2 = '0') and (acq_core_pre_samples_swb_s1 = '1')) then
        regs_o.pre_samples_o <= acq_core_pre_samples_int;
      end if;
    end if;
  end process;
  
  
-- Post-trigger samples
-- asynchronous std_logic_vector register : Post-trigger samples (type RW/RO, fs_clk_i <-> clk_sys_i)
  process (fs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      acq_core_post_samples_swb_s0 <= '0';
      acq_core_post_samples_swb_s1 <= '0';
      acq_core_post_samples_swb_s2 <= '0';
      regs_o.post_samples_o <= "00000000000000000000000000000000";
    elsif rising_edge(fs_clk_i) then
      acq_core_post_samples_swb_s0 <= acq_core_post_samples_swb;
      acq_core_post_samples_swb_s1 <= acq_core_post_samples_swb_s0;
      acq_core_post_samples_swb_s2 <= acq_core_post_samples_swb_s1;
      if ((acq_core_post_samples_swb_s2 = '0') and (acq_core_post_samples_swb_s1 = '1')) then
        regs_o.post_samples_o <= acq_core_post_samples_int;
      end if;
    end if;
  end process;
  
  
-- Samples counter
-- asynchronous std_logic_vector register : Samples counter (type RO/WO, fs_clk_i <-> clk_sys_i)
  process (fs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      acq_core_samples_cnt_lwb_s0 <= '0';
      acq_core_samples_cnt_lwb_s1 <= '0';
      acq_core_samples_cnt_lwb_s2 <= '0';
      acq_core_samples_cnt_int <= "00000000000000000000000000000000";
    elsif rising_edge(fs_clk_i) then
      acq_core_samples_cnt_lwb_s0 <= acq_core_samples_cnt_lwb;
      acq_core_samples_cnt_lwb_s1 <= acq_core_samples_cnt_lwb_s0;
      acq_core_samples_cnt_lwb_s2 <= acq_core_samples_cnt_lwb_s1;
      if ((acq_core_samples_cnt_lwb_s1 = '1') and (acq_core_samples_cnt_lwb_s2 = '0')) then
        acq_core_samples_cnt_int <= regs_i.samples_cnt_i;
      end if;
    end if;
  end process;
  
  
-- DDR3 Start Address
-- asynchronous std_logic_vector register : DDR3 Start Address (type RW/RO, ext_clk_i <-> clk_sys_i)
  process (ext_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      acq_core_ddr3_start_addr_swb_s0 <= '0';
      acq_core_ddr3_start_addr_swb_s1 <= '0';
      acq_core_ddr3_start_addr_swb_s2 <= '0';
      regs_o.ddr3_start_addr_o <= "00000000000000000000000000000000";
    elsif rising_edge(ext_clk_i) then
      acq_core_ddr3_start_addr_swb_s0 <= acq_core_ddr3_start_addr_swb;
      acq_core_ddr3_start_addr_swb_s1 <= acq_core_ddr3_start_addr_swb_s0;
      acq_core_ddr3_start_addr_swb_s2 <= acq_core_ddr3_start_addr_swb_s1;
      if ((acq_core_ddr3_start_addr_swb_s2 = '0') and (acq_core_ddr3_start_addr_swb_s1 = '1')) then
        regs_o.ddr3_start_addr_o <= acq_core_ddr3_start_addr_int;
      end if;
    end if;
  end process;
  
  
-- DDR3 End Address
-- asynchronous std_logic_vector register : DDR3 End Address (type RW/RO, ext_clk_i <-> clk_sys_i)
  process (ext_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      acq_core_ddr3_end_addr_swb_s0 <= '0';
      acq_core_ddr3_end_addr_swb_s1 <= '0';
      acq_core_ddr3_end_addr_swb_s2 <= '0';
      regs_o.ddr3_end_addr_o <= "00000000000000000000000000000000";
    elsif rising_edge(ext_clk_i) then
      acq_core_ddr3_end_addr_swb_s0 <= acq_core_ddr3_end_addr_swb;
      acq_core_ddr3_end_addr_swb_s1 <= acq_core_ddr3_end_addr_swb_s0;
      acq_core_ddr3_end_addr_swb_s2 <= acq_core_ddr3_end_addr_swb_s1;
      if ((acq_core_ddr3_end_addr_swb_s2 = '0') and (acq_core_ddr3_end_addr_swb_s1 = '1')) then
        regs_o.ddr3_end_addr_o <= acq_core_ddr3_end_addr_int;
      end if;
    end if;
  end process;
  
  
-- Acquisition channel selection
-- asynchronous std_logic_vector register : Acquisition channel selection (type RW/RO, fs_clk_i <-> clk_sys_i)
  process (fs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      acq_core_acq_chan_ctl_which_swb_s0 <= '0';
      acq_core_acq_chan_ctl_which_swb_s1 <= '0';
      acq_core_acq_chan_ctl_which_swb_s2 <= '0';
      regs_o.acq_chan_ctl_which_o <= "00000";
    elsif rising_edge(fs_clk_i) then
      acq_core_acq_chan_ctl_which_swb_s0 <= acq_core_acq_chan_ctl_which_swb;
      acq_core_acq_chan_ctl_which_swb_s1 <= acq_core_acq_chan_ctl_which_swb_s0;
      acq_core_acq_chan_ctl_which_swb_s2 <= acq_core_acq_chan_ctl_which_swb_s1;
      if ((acq_core_acq_chan_ctl_which_swb_s2 = '0') and (acq_core_acq_chan_ctl_which_swb_s1 = '1')) then
        regs_o.acq_chan_ctl_which_o <= acq_core_acq_chan_ctl_which_int;
      end if;
    end if;
  end process;
  
  
-- Reserved
  regs_o.acq_chan_ctl_reserved_o <= acq_core_acq_chan_ctl_reserved_int;
-- Data-driven channel selection
-- asynchronous std_logic_vector register : Data-driven channel selection (type RW/RO, fs_clk_i <-> clk_sys_i)
  process (fs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      acq_core_acq_chan_ctl_dtrig_which_swb_s0 <= '0';
      acq_core_acq_chan_ctl_dtrig_which_swb_s1 <= '0';
      acq_core_acq_chan_ctl_dtrig_which_swb_s2 <= '0';
      regs_o.acq_chan_ctl_dtrig_which_o <= "00000";
    elsif rising_edge(fs_clk_i) then
      acq_core_acq_chan_ctl_dtrig_which_swb_s0 <= acq_core_acq_chan_ctl_dtrig_which_swb;
      acq_core_acq_chan_ctl_dtrig_which_swb_s1 <= acq_core_acq_chan_ctl_dtrig_which_swb_s0;
      acq_core_acq_chan_ctl_dtrig_which_swb_s2 <= acq_core_acq_chan_ctl_dtrig_which_swb_s1;
      if ((acq_core_acq_chan_ctl_dtrig_which_swb_s2 = '0') and (acq_core_acq_chan_ctl_dtrig_which_swb_s1 = '1')) then
        regs_o.acq_chan_ctl_dtrig_which_o <= acq_core_acq_chan_ctl_dtrig_which_int;
      end if;
    end if;
  end process;
  
  
-- Reserved1
  regs_o.acq_chan_ctl_reserved1_o <= acq_core_acq_chan_ctl_reserved1_int;
-- Number of acquisition channels
-- Reserved2
  regs_o.acq_chan_ctl_reserved2_o <= acq_core_acq_chan_ctl_reserved2_int;
-- Channel Internal Width
-- Number of coalescing words
-- Number of atoms inside the complete data word (int_width*num_coalesce)
-- Atom width
-- Channel Internal Width
-- Number of coalescing words
-- Number of atoms inside the complete data word (int_width*num_coalesce)
-- Atom width
-- Channel Internal Width
-- Number of coalescing words
-- Number of atoms inside the complete data word (int_width*num_coalesce)
-- Atom width
-- Channel Internal Width
-- Number of coalescing words
-- Number of atoms inside the complete data word (int_width*num_coalesce)
-- Atom width
-- Channel Internal Width
-- Number of coalescing words
-- Number of atoms inside the complete data word (int_width*num_coalesce)
-- Atom width
-- Channel Internal Width
-- Number of coalescing words
-- Number of atoms inside the complete data word (int_width*num_coalesce)
-- Atom width
-- Channel Internal Width
-- Number of coalescing words
-- Number of atoms inside the complete data word (int_width*num_coalesce)
-- Atom width
-- Channel Internal Width
-- Number of coalescing words
-- Number of atoms inside the complete data word (int_width*num_coalesce)
-- Atom width
-- Channel Internal Width
-- Number of coalescing words
-- Number of atoms inside the complete data word (int_width*num_coalesce)
-- Atom width
-- Channel Internal Width
-- Number of coalescing words
-- Number of atoms inside the complete data word (int_width*num_coalesce)
-- Atom width
-- Channel Internal Width
-- Number of coalescing words
-- Number of atoms inside the complete data word (int_width*num_coalesce)
-- Atom width
-- Channel Internal Width
-- Number of coalescing words
-- Number of atoms inside the complete data word (int_width*num_coalesce)
-- Atom width
-- Channel Internal Width
-- Number of coalescing words
-- Number of atoms inside the complete data word (int_width*num_coalesce)
-- Atom width
-- Channel Internal Width
-- Number of coalescing words
-- Number of atoms inside the complete data word (int_width*num_coalesce)
-- Atom width
-- Channel Internal Width
-- Number of coalescing words
-- Number of atoms inside the complete data word (int_width*num_coalesce)
-- Atom width
-- Channel Internal Width
-- Number of coalescing words
-- Number of atoms inside the complete data word (int_width*num_coalesce)
-- Atom width
-- Channel Internal Width
-- Number of coalescing words
-- Number of atoms inside the complete data word (int_width*num_coalesce)
-- Atom width
-- Channel Internal Width
-- Number of coalescing words
-- Number of atoms inside the complete data word (int_width*num_coalesce)
-- Atom width
-- Channel Internal Width
-- Number of coalescing words
-- Number of atoms inside the complete data word (int_width*num_coalesce)
-- Atom width
-- Channel Internal Width
-- Number of coalescing words
-- Number of atoms inside the complete data word (int_width*num_coalesce)
-- Atom width
-- Channel Internal Width
-- Number of coalescing words
-- Number of atoms inside the complete data word (int_width*num_coalesce)
-- Atom width
-- Channel Internal Width
-- Number of coalescing words
-- Number of atoms inside the complete data word (int_width*num_coalesce)
-- Atom width
-- Channel Internal Width
-- Number of coalescing words
-- Number of atoms inside the complete data word (int_width*num_coalesce)
-- Atom width
-- Channel Internal Width
-- Number of coalescing words
-- Number of atoms inside the complete data word (int_width*num_coalesce)
-- Atom width
  rwaddr_reg <= wb_adr_i;
  wb_stall_o <= (not ack_sreg(0)) and (wb_stb_i and wb_cyc_i);
  wb_err_o <= '0';
  wb_rty_o <= '0';
-- ACK signal generation. Just pass the LSB of ACK counter.
  wb_ack_o <= ack_sreg(0);
end syn;
